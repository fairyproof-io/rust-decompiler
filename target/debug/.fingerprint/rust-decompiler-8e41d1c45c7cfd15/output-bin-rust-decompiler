{"message":"expected type, found local variable `u`","code":{"code":"E0573","explanation":"Something other than a type has been used when one was expected.\n\nErroneous code examples:\n\n```compile_fail,E0573\nenum Dragon {\n    Born,\n}\n\nfn oblivion() -> Dragon::Born { // error!\n    Dragon::Born\n}\n\nconst HOBBIT: u32 = 2;\nimpl HOBBIT {} // error!\n\nenum Wizard {\n    Gandalf,\n    Saruman,\n}\n\ntrait Isengard {\n    fn wizard(_: Wizard::Saruman); // error!\n}\n```\n\nIn all these errors, a type was expected. For example, in the first error, if\nwe want to return the `Born` variant from the `Dragon` enum, we must set the\nfunction to return the enum and not its variant:\n\n```\nenum Dragon {\n    Born,\n}\n\nfn oblivion() -> Dragon { // ok!\n    Dragon::Born\n}\n```\n\nIn the second error, you can't implement something on an item, only on types.\nWe would need to create a new type if we wanted to do something similar:\n\n```\nstruct Hobbit(u32); // we create a new type\n\nconst HOBBIT: Hobbit = Hobbit(2);\nimpl Hobbit {} // ok!\n```\n\nIn the third case, we tried to only expect one variant of the `Wizard` enum,\nwhich is not possible. To make this work, we need to using pattern matching\nover the `Wizard` enum:\n\n```\nenum Wizard {\n    Gandalf,\n    Saruman,\n}\n\ntrait Isengard {\n    fn wizard(w: Wizard) { // ok!\n        match w {\n            Wizard::Saruman => {\n                // do something\n            }\n            _ => {} // ignore everything else\n        }\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/asm.rs","byte_start":2622,"byte_end":2623,"line_start":94,"line_end":94,"column_start":56,"column_end":57,"is_primary":true,"text":[{"text":"            self.arg = self.code[self.pc + 1 as usize: u as usize];","highlight_start":56,"highlight_end":57}],"label":"expecting a type here because of type ascription","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0573]\u001b[0m\u001b[0m\u001b[1m: expected type, found local variable `u`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/asm.rs:94:56\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            self.arg = self.code[self.pc + 1 as usize: u as usize];\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpecting a type here because of type ascription\u001b[0m\n\n"}
{"message":"implicit elided lifetime not allowed here","code":{"code":"E0726","explanation":null},"level":"error","spans":[{"file_name":"src/asm.rs","byte_start":1081,"byte_end":1100,"line_start":48,"line_end":48,"column_start":6,"column_end":25,"is_primary":true,"text":[{"text":"impl InstructionIterator {","highlight_start":6,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"assuming a `'static` lifetime...","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"indicate the anonymous lifetime","code":null,"level":"help","spans":[{"file_name":"src/asm.rs","byte_start":1100,"byte_end":1100,"line_start":48,"line_end":48,"column_start":25,"column_end":25,"is_primary":true,"text":[{"text":"impl InstructionIterator {","highlight_start":25,"highlight_end":25}],"label":null,"suggested_replacement":"<'_>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0726]\u001b[0m\u001b[0m\u001b[1m: implicit elided lifetime not allowed here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/asm.rs:48:6\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl InstructionIterator {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: indicate the anonymous lifetime: `<'_>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: assuming a `'static` lifetime...\u001b[0m\n\n"}
{"message":"implicit elided lifetime not allowed here","code":{"code":"E0726","explanation":null},"level":"error","spans":[{"file_name":"src/asm.rs","byte_start":1347,"byte_end":1366,"line_start":61,"line_end":61,"column_start":19,"column_end":38,"is_primary":true,"text":[{"text":"impl Iterator for InstructionIterator {","highlight_start":19,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"assuming a `'static` lifetime...","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"indicate the anonymous lifetime","code":null,"level":"help","spans":[{"file_name":"src/asm.rs","byte_start":1366,"byte_end":1366,"line_start":61,"line_end":61,"column_start":38,"column_end":38,"is_primary":true,"text":[{"text":"impl Iterator for InstructionIterator {","highlight_start":38,"highlight_end":38}],"label":null,"suggested_replacement":"<'_>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0726]\u001b[0m\u001b[0m\u001b[1m: implicit elided lifetime not allowed here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/asm.rs:61:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl Iterator for InstructionIterator {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: indicate the anonymous lifetime: `<'_>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: assuming a `'static` lifetime...\u001b[0m\n\n"}
{"message":"unused import: `std::ascii::escape_default`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/asm.rs","byte_start":4,"byte_end":30,"line_start":1,"line_end":1,"column_start":5,"column_end":31,"is_primary":true,"text":[{"text":"use std::ascii::escape_default;","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/asm.rs","byte_start":0,"byte_end":31,"line_start":1,"line_end":1,"column_start":1,"column_end":32,"is_primary":true,"text":[{"text":"use std::ascii::escape_default;","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::ascii::escape_default`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/asm.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse std::ascii::escape_default;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `crate::asm::ASMError::HexDecodeError`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/asm.rs","byte_start":139,"byte_end":175,"line_start":6,"line_end":6,"column_start":5,"column_end":41,"is_primary":true,"text":[{"text":"use crate::asm::ASMError::HexDecodeError;","highlight_start":5,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/asm.rs","byte_start":135,"byte_end":176,"line_start":6,"line_end":6,"column_start":1,"column_end":42,"is_primary":true,"text":[{"text":"use crate::asm::ASMError::HexDecodeError;","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::asm::ASMError::HexDecodeError`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/asm.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::asm::ASMError::HexDecodeError;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the trait bound `OpCode: From<[(OpCode, &str); 144]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/opcodes.rs","byte_start":2849,"byte_end":7704,"line_start":166,"line_end":321,"column_start":60,"column_end":2,"is_primary":true,"text":[{"text":"const opCode_to_str: HashMap<OpCode, &str> = HashMap::from([","highlight_start":60,"highlight_end":61},{"text":"    // 0x0 range - arithmetic ops.","highlight_start":1,"highlight_end":35},{"text":"    (OpCode::STOP, \"STOP\"),","highlight_start":1,"highlight_end":28},{"text":"    (OpCode::ADD, \"ADD\"),","highlight_start":1,"highlight_end":26},{"text":"    (OpCode::MUL, \"MUL\"),","highlight_start":1,"highlight_end":26},{"text":"    (OpCode::SUB, \"SUB\"),","highlight_start":1,"highlight_end":26},{"text":"    (OpCode::DIV, \"DIV\"),","highlight_start":1,"highlight_end":26},{"text":"    (OpCode::SDIV, \"SDIV\"),","highlight_start":1,"highlight_end":28},{"text":"    (OpCode::MOD, \"MOD\"),","highlight_start":1,"highlight_end":26},{"text":"    (OpCode::SMOD, \"SMOD\"),","highlight_start":1,"highlight_end":28},{"text":"    (OpCode::EXP, \"EXP\"),","highlight_start":1,"highlight_end":26},{"text":"    (OpCode::NOT, \"NOT\"),","highlight_start":1,"highlight_end":26},{"text":"    (OpCode::LT, \"LT\"),","highlight_start":1,"highlight_end":24},{"text":"    (OpCode::GT, \"GT\"),","highlight_start":1,"highlight_end":24},{"text":"    (OpCode::SLT, \"SLT\"),","highlight_start":1,"highlight_end":26},{"text":"    (OpCode::SGT, \"SGT\"),","highlight_start":1,"highlight_end":26},{"text":"    (OpCode::EQ, \"EQ\"),","highlight_start":1,"highlight_end":24},{"text":"    (OpCode::ISZERO, \"ISZERO\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::SIGNEXTEND, \"SIGNEXTEND\"),","highlight_start":1,"highlight_end":40},{"text":"    // 0x10 range - bit ops.","highlight_start":1,"highlight_end":29},{"text":"    (OpCode::AND, \"AND\"),","highlight_start":1,"highlight_end":26},{"text":"    (OpCode::OR, \"OR\"),","highlight_start":1,"highlight_end":24},{"text":"    (OpCode::XOR, \"XOR\"),","highlight_start":1,"highlight_end":26},{"text":"    (OpCode::BYTE, \"BYTE\"),","highlight_start":1,"highlight_end":28},{"text":"    (OpCode::SHL, \"SHL\"),","highlight_start":1,"highlight_end":26},{"text":"    (OpCode::SHR, \"SHR\"),","highlight_start":1,"highlight_end":26},{"text":"    (OpCode::SAR, \"SAR\"),","highlight_start":1,"highlight_end":26},{"text":"    (OpCode::ADDMOD, \"ADDMOD\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::MULMOD, \"MULMOD\"),","highlight_start":1,"highlight_end":32},{"text":"    // 0x20 range - crypto.","highlight_start":1,"highlight_end":28},{"text":"    (OpCode::KECCAK256, \"KECCAK256\"),","highlight_start":1,"highlight_end":38},{"text":"    // 0x30 range - closure state.","highlight_start":1,"highlight_end":35},{"text":"    (OpCode::ADDRESS, \"ADDRESS\"),","highlight_start":1,"highlight_end":34},{"text":"    (OpCode::BALANCE, \"BALANCE\"),","highlight_start":1,"highlight_end":34},{"text":"    (OpCode::ORIGIN, \"ORIGIN\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::CALLER, \"CALLER\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::CALLVALUE, \"CALLVALUE\"),","highlight_start":1,"highlight_end":38},{"text":"    (OpCode::CALLDATALOAD, \"CALLDATALOAD\"),","highlight_start":1,"highlight_end":44},{"text":"    (OpCode::CALLDATASIZE, \"CALLDATASIZE\"),","highlight_start":1,"highlight_end":44},{"text":"    (OpCode::CALLDATACOPY, \"CALLDATACOPY\"),","highlight_start":1,"highlight_end":44},{"text":"    (OpCode::CODESIZE, \"CODESIZE\"),","highlight_start":1,"highlight_end":36},{"text":"    (OpCode::CODECOPY, \"CODECOPY\"),","highlight_start":1,"highlight_end":36},{"text":"    (OpCode::GASPRICE, \"GASPRICE\"),","highlight_start":1,"highlight_end":36},{"text":"    (OpCode::EXTCODESIZE, \"EXTCODESIZE\"),","highlight_start":1,"highlight_end":42},{"text":"    (OpCode::EXTCODECOPY, \"EXTCODECOPY\"),","highlight_start":1,"highlight_end":42},{"text":"    (OpCode::RETURNDATASIZE, \"RETURNDATASIZE\"),","highlight_start":1,"highlight_end":48},{"text":"    (OpCode::RETURNDATACOPY, \"RETURNDATACOPY\"),","highlight_start":1,"highlight_end":48},{"text":"    (OpCode::EXTCODEHASH, \"EXTCODEHASH\"),","highlight_start":1,"highlight_end":42},{"text":"    // 0x40 range - block operations.","highlight_start":1,"highlight_end":38},{"text":"    (OpCode::BLOCKHASH, \"BLOCKHASH\"),","highlight_start":1,"highlight_end":38},{"text":"    (OpCode::COINBASE, \"COINBASE\"),","highlight_start":1,"highlight_end":36},{"text":"    (OpCode::TIMESTAMP, \"TIMESTAMP\"),","highlight_start":1,"highlight_end":38},{"text":"    (OpCode::NUMBER, \"NUMBER\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::DIFFICULTY, \"DIFFICULTY\"),","highlight_start":1,"highlight_end":40},{"text":"    (OpCode::GASLIMIT, \"GASLIMIT\"),","highlight_start":1,"highlight_end":36},{"text":"    (OpCode::CHAINID, \"CHAINID\"),","highlight_start":1,"highlight_end":34},{"text":"    (OpCode::SELFBALANCE, \"SELFBALANCE\"),","highlight_start":1,"highlight_end":42},{"text":"    (OpCode::BASEFEE, \"BASEFEE\"),","highlight_start":1,"highlight_end":34},{"text":"    // 0x50 range - 'storage' and execution.","highlight_start":1,"highlight_end":45},{"text":"    (OpCode::POP, \"POP\"),","highlight_start":1,"highlight_end":26},{"text":"    //DUP,    \"DUP\",","highlight_start":1,"highlight_end":21},{"text":"    //SWAP,   \"SWAP\",","highlight_start":1,"highlight_end":22},{"text":"    (OpCode::MLOAD, \"MLOAD\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::MSTORE, \"MSTORE\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::MSTORE8, \"MSTORE8\"),","highlight_start":1,"highlight_end":34},{"text":"    (OpCode::SLOAD, \"SLOAD\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::SSTORE, \"SSTORE\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::JUMP, \"JUMP\"),","highlight_start":1,"highlight_end":28},{"text":"    (OpCode::JUMPI, \"JUMPI\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::PC, \"PC\"),","highlight_start":1,"highlight_end":24},{"text":"    (OpCode::MSIZE, \"MSIZE\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::GAS, \"GAS\"),","highlight_start":1,"highlight_end":26},{"text":"    (OpCode::JUMPDEST, \"JUMPDEST\"),","highlight_start":1,"highlight_end":36},{"text":"    (OpCode::PUSH0, \"PUSH0\"),","highlight_start":1,"highlight_end":30},{"text":"    // 0x60 range - push.","highlight_start":1,"highlight_end":26},{"text":"    (OpCode::PUSH1, \"PUSH1\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::PUSH2, \"PUSH2\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::PUSH3, \"PUSH3\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::PUSH4, \"PUSH4\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::PUSH5, \"PUSH5\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::PUSH6, \"PUSH6\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::PUSH7, \"PUSH7\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::PUSH8, \"PUSH8\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::PUSH9, \"PUSH9\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::PUSH10, \"PUSH10\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::PUSH11, \"PUSH11\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::PUSH12, \"PUSH12\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::PUSH13, \"PUSH13\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::PUSH14, \"PUSH14\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::PUSH15, \"PUSH15\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::PUSH16, \"PUSH16\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::PUSH17, \"PUSH17\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::PUSH18, \"PUSH18\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::PUSH19, \"PUSH19\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::PUSH20, \"PUSH20\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::PUSH21, \"PUSH21\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::PUSH22, \"PUSH22\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::PUSH23, \"PUSH23\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::PUSH24, \"PUSH24\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::PUSH25, \"PUSH25\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::PUSH26, \"PUSH26\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::PUSH27, \"PUSH27\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::PUSH28, \"PUSH28\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::PUSH29, \"PUSH29\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::PUSH30, \"PUSH30\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::PUSH31, \"PUSH31\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::PUSH32, \"PUSH32\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::DUP1, \"DUP1\"),","highlight_start":1,"highlight_end":28},{"text":"    (OpCode::DUP2, \"DUP2\"),","highlight_start":1,"highlight_end":28},{"text":"    (OpCode::DUP3, \"DUP3\"),","highlight_start":1,"highlight_end":28},{"text":"    (OpCode::DUP4, \"DUP4\"),","highlight_start":1,"highlight_end":28},{"text":"    (OpCode::DUP5, \"DUP5\"),","highlight_start":1,"highlight_end":28},{"text":"    (OpCode::DUP6, \"DUP6\"),","highlight_start":1,"highlight_end":28},{"text":"    (OpCode::DUP7, \"DUP7\"),","highlight_start":1,"highlight_end":28},{"text":"    (OpCode::DUP8, \"DUP8\"),","highlight_start":1,"highlight_end":28},{"text":"    (OpCode::DUP9, \"DUP9\"),","highlight_start":1,"highlight_end":28},{"text":"    (OpCode::DUP10, \"DUP10\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::DUP11, \"DUP11\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::DUP12, \"DUP12\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::DUP13, \"DUP13\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::DUP14, \"DUP14\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::DUP15, \"DUP15\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::DUP16, \"DUP16\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::SWAP1, \"SWAP1\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::SWAP2, \"SWAP2\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::SWAP3, \"SWAP3\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::SWAP4, \"SWAP4\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::SWAP5, \"SWAP5\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::SWAP6, \"SWAP6\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::SWAP7, \"SWAP7\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::SWAP8, \"SWAP8\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::SWAP9, \"SWAP9\"),","highlight_start":1,"highlight_end":30},{"text":"    (OpCode::SWAP10, \"SWAP10\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::SWAP11, \"SWAP11\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::SWAP12, \"SWAP12\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::SWAP13, \"SWAP13\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::SWAP14, \"SWAP14\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::SWAP15, \"SWAP15\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::SWAP16, \"SWAP16\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::LOG0, \"LOG0\"),","highlight_start":1,"highlight_end":28},{"text":"    (OpCode::LOG1, \"LOG1\"),","highlight_start":1,"highlight_end":28},{"text":"    (OpCode::LOG2, \"LOG2\"),","highlight_start":1,"highlight_end":28},{"text":"    (OpCode::LOG3, \"LOG3\"),","highlight_start":1,"highlight_end":28},{"text":"    (OpCode::LOG4, \"LOG4\"),","highlight_start":1,"highlight_end":28},{"text":"    // 0xf0 range.","highlight_start":1,"highlight_end":19},{"text":"    (OpCode::CREATE, \"CREATE\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::CALL, \"CALL\"),","highlight_start":1,"highlight_end":28},{"text":"    (OpCode::RETURN, \"RETURN\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::CALLCODE, \"CALLCODE\"),","highlight_start":1,"highlight_end":36},{"text":"    (OpCode::DELEGATECALL, \"DELEGATECALL\"),","highlight_start":1,"highlight_end":44},{"text":"    (OpCode::CREATE2, \"CREATE2\"),","highlight_start":1,"highlight_end":34},{"text":"    (OpCode::STATICCALL, \"STATICCALL\"),","highlight_start":1,"highlight_end":40},{"text":"    (OpCode::REVERT, \"REVERT\"),","highlight_start":1,"highlight_end":32},{"text":"    (OpCode::INVALID, \"INVALID\"),","highlight_start":1,"highlight_end":34},{"text":"    (OpCode::SELFDESTRUCT, \"SELFDESTRUCT\"),","highlight_start":1,"highlight_end":44},{"text":"]);","highlight_start":1,"highlight_end":2}],"label":"expected an implementor of trait `From<[(OpCode, &str); 144]>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/opcodes.rs","byte_start":2835,"byte_end":2848,"line_start":166,"line_end":166,"column_start":46,"column_end":59,"is_primary":false,"text":[{"text":"const opCode_to_str: HashMap<OpCode, &str> = HashMap::from([","highlight_start":46,"highlight_end":59}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"required because of the requirements on the impl of `From<[(OpCode, &str); 144]>` for `HashMap<OpCode, &str>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by `from`","code":null,"level":"note","spans":[{"file_name":"/Users/caimin/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/convert/mod.rs","byte_start":13597,"byte_end":13619,"line_start":373,"line_end":373,"column_start":5,"column_end":27,"is_primary":true,"text":[{"text":"    fn from(_: T) -> Self;","highlight_start":5,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider borrowing here","code":null,"level":"help","spans":[{"file_name":"src/opcodes.rs","byte_start":2849,"byte_end":2849,"line_start":166,"line_end":166,"column_start":60,"column_end":60,"is_primary":true,"text":[{"text":"const opCode_to_str: HashMap<OpCode, &str> = HashMap::from([","highlight_start":60,"highlight_end":60}],"label":null,"suggested_replacement":"&","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/opcodes.rs","byte_start":2849,"byte_end":2849,"line_start":166,"line_end":166,"column_start":60,"column_end":60,"is_primary":true,"text":[{"text":"const opCode_to_str: HashMap<OpCode, &str> = HashMap::from([","highlight_start":60,"highlight_end":60}],"label":null,"suggested_replacement":"&mut ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `OpCode: From<[(OpCode, &str); 144]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/opcodes.rs:166:60\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mconst opCode_to_str: HashMap<OpCode, &str> = HashMap::from([\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m______________________________________________\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m167\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // 0x0 range - arithmetic ops.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (OpCode::STOP, \"STOP\"),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (OpCode::ADD, \"ADD\"),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m320\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (OpCode::SELFDESTRUCT, \"SELFDESTRUCT\"),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m321\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected an implementor of trait `From<[(OpCode, &str); 144]>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `From<[(OpCode, &str); 144]>` for `HashMap<OpCode, &str>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by `from`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/caimin/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/convert/mod.rs:373:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m373\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn from(_: T) -> Self;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider borrowing here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mconst opCode_to_str: HashMap<OpCode, &str> = HashMap::from(\u001b[0m\u001b[0m\u001b[38;5;10m&\u001b[0m\u001b[0m[\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mconst opCode_to_str: HashMap<OpCode, &str> = HashMap::from(\u001b[0m\u001b[0m\u001b[38;5;10m&mut \u001b[0m\u001b[0m[\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[38;5;10m++++\u001b[0m\n\n"}
{"message":"cannot index into a value of type `HashMap<OpCode, &'static str>`","code":{"code":"E0608","explanation":"An attempt to use index on a type which doesn't implement the `std::ops::Index`\ntrait was performed.\n\nErroneous code example:\n\n```compile_fail,E0608\n0u8[2]; // error: cannot index into a value of type `u8`\n```\n\nTo be able to index into a type it needs to implement the `std::ops::Index`\ntrait. Example:\n\n```\nlet v: Vec<u8> = vec![0, 1, 2, 3];\n\n// The `Vec` type implements the `Index` trait so you can do:\nprintln!(\"{}\", v[2]);\n```\n"},"level":"error","spans":[{"file_name":"src/opcodes.rs","byte_start":8847,"byte_end":8866,"line_start":367,"line_end":367,"column_start":25,"column_end":44,"is_primary":true,"text":[{"text":"        write!(f, \"{}\", opCode_to_str[self])","highlight_start":25,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0608]\u001b[0m\u001b[0m\u001b[1m: cannot index into a value of type `HashMap<OpCode, &'static str>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/opcodes.rs:367:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m367\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        write!(f, \"{}\", opCode_to_str[self])\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the type `[u8]` cannot be indexed by `u64`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/asm.rs","byte_start":2590,"byte_end":2633,"line_start":94,"line_end":94,"column_start":24,"column_end":67,"is_primary":true,"text":[{"text":"            self.arg = self.code[self.pc + 1 as usize: u as usize];","highlight_start":24,"highlight_end":67}],"label":"slice indices are of type `usize` or ranges of `usize`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `SliceIndex<[u8]>` is not implemented for `u64`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `Index<u64>` for `[u8]`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the type `[u8]` cannot be indexed by `u64`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/asm.rs:94:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            self.arg = self.code[self.pc + 1 as usize: u as usize];\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mslice indices are of type `usize` or ranges of `usize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `SliceIndex<[u8]>` is not implemented for `u64`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `Index<u64>` for `[u8]`\u001b[0m\n\n"}
{"message":"non-primitive cast: `u8` as `OpCode`","code":{"code":"E0605","explanation":"An invalid cast was attempted.\n\nErroneous code examples:\n\n```compile_fail,E0605\nlet x = 0u8;\nx as Vec<u8>; // error: non-primitive cast: `u8` as `std::vec::Vec<u8>`\n\n// Another example\n\nlet v = core::ptr::null::<u8>(); // So here, `v` is a `*const u8`.\nv as &u8; // error: non-primitive cast: `*const u8` as `&u8`\n```\n\nOnly primitive types can be cast into each other. Examples:\n\n```\nlet x = 0u8;\nx as u32; // ok!\n\nlet v = core::ptr::null::<u8>();\nv as *const i8; // ok!\n```\n\nFor more information about casts, take a look at the Type cast section in\n[The Reference Book][1].\n\n[1]: https://doc.rust-lang.org/reference/expressions/operator-expr.html#type-cast-expressions\n"},"level":"error","spans":[{"file_name":"src/asm.rs","byte_start":2190,"byte_end":2227,"line_start":86,"line_end":86,"column_start":19,"column_end":56,"is_primary":true,"text":[{"text":"        self.op = self.code[self.pc as usize] as OpCode;","highlight_start":19,"highlight_end":56}],"label":"an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0605]\u001b[0m\u001b[0m\u001b[1m: non-primitive cast: `u8` as `OpCode`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/asm.rs:86:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        self.op = self.code[self.pc as usize] as OpCode;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9man `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\u001b[0m\n\n"}
{"message":"casting `&OpCode` as `u64` is invalid","code":{"code":"E0606","explanation":"An incompatible cast was attempted.\n\nErroneous code example:\n\n```compile_fail,E0606\nlet x = &0u8; // Here, `x` is a `&u8`.\nlet y: u32 = x as u32; // error: casting `&u8` as `u32` is invalid\n```\n\nWhen casting, keep in mind that only primitive types can be cast into each\nother. Example:\n\n```\nlet x = &0u8;\nlet y: u32 = *x as u32; // We dereference it first and then cast it.\n```\n\nFor more information about casts, take a look at the Type cast section in\n[The Reference Book][1].\n\n[1]: https://doc.rust-lang.org/reference/expressions/operator-expr.html#type-cast-expressions\n"},"level":"error","spans":[{"file_name":"src/asm.rs","byte_start":2279,"byte_end":2294,"line_start":88,"line_end":88,"column_start":20,"column_end":35,"is_primary":true,"text":[{"text":"            let a= &self.op as u64 - PUSH1 as u64 + 1;","highlight_start":20,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"cast through a raw pointer first","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0606]\u001b[0m\u001b[0m\u001b[1m: casting `&OpCode` as `u64` is invalid\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/asm.rs:88:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            let a= &self.op as u64 - PUSH1 as u64 + 1;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: cast through a raw pointer first\u001b[0m\n\n"}
{"message":"type annotations needed","code":{"code":"E0282","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0282\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nApart from a method or function with a generic type parameter, this error can\noccur when a type parameter of a struct or trait cannot be inferred. In that\ncase it is not always possible to use a type annotation, because all candidates\nhave the same return type. For instance:\n\n```compile_fail,E0282\nstruct Foo<T> {\n    num: T,\n}\n\nimpl<T> Foo<T> {\n    fn bar() -> i32 {\n        0\n    }\n\n    fn baz() {\n        let number = Foo::bar();\n    }\n}\n```\n\nThis will fail because the compiler does not know which instance of `Foo` to\ncall `bar` on. Change `Foo::bar()` to `Foo::<T>::bar()` to resolve the error.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":160,"byte_end":164,"line_start":8,"line_end":8,"column_start":9,"column_end":13,"is_primary":false,"text":[{"text":"    let args = std::env::args().collect();","highlight_start":9,"highlight_end":13}],"label":"consider giving `args` a type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":218,"byte_end":222,"line_start":9,"line_end":9,"column_start":24,"column_end":28,"is_primary":true,"text":[{"text":"    print_disassembled(args[0])","highlight_start":24,"highlight_end":28}],"label":"cannot infer type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"type must be known at this point","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0282]\u001b[0m\u001b[0m\u001b[1m: type annotations needed\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:24\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let args = std::env::args().collect();\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mconsider giving `args` a type\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    print_disassembled(args[0])\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: type must be known at this point\u001b[0m\n\n"}
{"message":"can't compare `FromHexError` with `FromHexError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/asm.rs","byte_start":329,"byte_end":341,"line_start":13,"line_end":13,"column_start":20,"column_end":32,"is_primary":true,"text":[{"text":"    HexDecodeError(FromHexError),","highlight_start":20,"highlight_end":32}],"label":"no implementation for `FromHexError < FromHexError` and `FromHexError > FromHexError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/asm.rs","byte_start":230,"byte_end":240,"line_start":10,"line_end":10,"column_start":17,"column_end":27,"is_primary":false,"text":[{"text":"#[derive(Debug, PartialOrd, PartialEq)]","highlight_start":17,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(PartialOrd)]","def_site_span":{"file_name":"/Users/caimin/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/cmp.rs","byte_start":34154,"byte_end":34218,"line_start":1103,"line_end":1105,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub macro PartialOrd($item:item) {","highlight_start":1,"highlight_end":35},{"text":"    /* compiler built-in */","highlight_start":1,"highlight_end":28},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `PartialOrd` is not implemented for `FromHexError`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by `std::cmp::PartialOrd::partial_cmp`","code":null,"level":"note","spans":[{"file_name":"/Users/caimin/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/cmp.rs","byte_start":31600,"byte_end":31655,"line_start":1018,"line_end":1018,"column_start":5,"column_end":60,"is_primary":true,"text":[{"text":"    fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;","highlight_start":5,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: can't compare `FromHexError` with `FromHexError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/asm.rs:13:20\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, PartialOrd, PartialEq)]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this derive macro expansion\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    HexDecodeError(FromHexError),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno implementation for `FromHexError < FromHexError` and `FromHexError > FromHexError`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `PartialOrd` is not implemented for `FromHexError`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by `std::cmp::PartialOrd::partial_cmp`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/caimin/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/cmp.rs:1018:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1018\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 10 previous errors; 2 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 10 previous errors; 2 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0277, E0282, E0573, E0605, E0606, E0608.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0282, E0573, E0605, E0606, E0608.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
